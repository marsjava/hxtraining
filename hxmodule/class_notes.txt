Wrapper classes
------------------

class Boolean{
 public static boolean parseBoolean(String){}
}
class Byte{
 public static byte parseByte(String){}
}
class Short{
 public static short parseShort(String){}
}
class Integer{
 public static int parseInt(String){}
}
Long
Float
Double
Character

Scanner API - java.util
------------------------
class Scanner{
 String next(){}
 String nextLine(){} 
 boolean nextBoolean(){}
}

java.io	- stream[byte/char]
--------------------------------------

byte			char

InputStream		Reader
OutputStream		Writer

BufferedReader br=new BufferedReader(new InputStream(System.in));

Collection(I)

boolean add(Object obj);
boolean addAll(Collection c);
int size();
boolean remove(Object);
boolean removeAll(Collection c);
boolean retainAll(Collection c);
void clear();
boolean contains(Object obj)
boolean containsAll(Collection c);
Iterator iterator();
Object[] toArray();

List(I)
boolean add(int index, Object obj)
boolean addAll(int index, Object obj)
boolean set(int index, Object obj);
Object get(int index);
Object remove(int index)


Map(I)
Object put(Object, Object);
void putAll(Map obj);
Object remove(Object key);
Object get(Object key);
boolean containsKey(Object key);
Set<Map.Entry> entrySet();
Set keySet();


ArrayList<String> obj = new ArrayList<E>();

HashSet<Integer> obj = new HashSet<E>();

HashMap<Integer, Student> obj = new HashMap<K, V>();


List<Customer> cList = new ArrayList<Customer>();

Set<String> mSet = new TreeSet<String>();
Set<String> mSet = new TreeSet<String>().desentingSet();


Map<Integer, String> cMap = new TreeMap<Integer, String>().desentingMap();


1. init

public void init(ServletConfig config){
}

2. service

public void service(ServletRequest request, ServletResponse response)throws ServletException, IOException{
}

3. destroy

public void destroy(){}

ServletRequest
public String getParameter(String);
public String[] getParameterValues(String);
public Enumeration getParameterNames();
public Map<K, V> getParameterMap();
public String setAttribute(String key, Object value);
public Object getAttribute(String key);
public void removeAttribute(String key);
public RequestDispatcher getRequestDispatcher(String url);
 

HttpServletRequest
Cookie[] getCookies()
HttpSession getSession()



ServletResponse
public PrintWriter getWriter();
public void setContentType(String)
public void setLocale(String type);
public Locale getLocale();


HttpServletResponse
public void sendRedirect(String);
public void sendError(int sc, String msg);
public void setStatus(int sc);
public void addCookie(Cookie obj);


HttpServlet

public void doGet(HttpServletRequest request, 
		  HttpServletResponse response)throws 		  ServletException, IOException{
}

ServletConfig
public String getInitParameter(String param-name);
public ServletContext getServletContext()



ServletContext


Session Management Techniques
1. URL Rewriting
2. Hidden form fields
3. Cookies
4. HttpSession



github.com

Session Management Technique:

Session Object: It is container used for storing user states in server.

HttpSession(I)

String setAttribute(String, Object)
Object getAttribute(String)
void removeAttribute(String)
Enumeration getAttributeNames()
String getId()
long getLastAccessedTime()
void setMaxInactiveInterval(int interval)
int getMaxInactiveInterval()
void invalidate();  

HttpSession session = request.getSession()
session.setAttribute(key, value);
session.getAttribute(key);

Design Pattern
1. Functional Design
2. Data Design
3. Interface Design

Directives:
It provides meta data infomation about the JSP file to the web container.

a. importing tag libraries
b. import required classes
c. set output buffering options
d. include the content from external files[header/footer.html]

<%@page %>

1. buffer="none|8kb|16kb.."
2. autoFlush="true/false"
3. contentType="text/html;charSet=ISO-8859-1"
4. errorPage="error.jsp"
5. isErrorPage="true/false"
6. extends="BaseClassName"
7. import="java.util.Date,java.io.BufferedReader"
8. info=""
9. isThreadSafe="true/false"
10. language="java"
11. session="true"
12. isELIgnored="true/false"
13. isScriptingEnabled = "true/false"


JSP Action Tags:
<jsp:actionTag_Name attribute="value">

<jsp:include page="pageName" />

<jsp:forward page="pageName">
  <jsp:param name="value" value="data"/>
</jsp:forward>

<jsp:useBean id="name" 
			 class="packagename.classname" 
             scope="page/request/session/application"
             type=""
             beanName="">
<jsp:setProperty name="beanId" 
                 property="NameofVariable" 
                 value="uiComponentName"/>
e.g.
<jsp:useBean id="emp" class="com.varsity.model.Employee" scope="request"/>
<jsp:setProperty name="emp" property="empId" value="empId" />
[or]
<jsp:setProperty name="emp" property="*"/>
<jsp:getProperty name="beanId" property="propertyName" />


SimpleTagSupport

doTag()
getParent() 
setParent()
setJspContext(JspContext context)
JspContext getJspContext()
JspFragment getJspBody()

JspContext
JspWriter getOut()

JspFragment
invoke(Writer obj)

Tags with Attribute.

Step1: Add attribute as a property to the tag handler.

Step2: Create setter method for the property follwing the bean setter naming convention.

Expression Language [EL]

EL is simple language for accessing data stored in java beans.
EL was introduced with the JSP 2.0 specification
EL can also be used access values from implicit objects like pageContext,
header, cookie etc.
syntax:
	${person.name}

pageContext
param
paramValues
header
headerValues
cookie
initParam
pageScope
requestScope
sessionScope
applicationScope

.operator
${sessionScope.message}

[] operator
${sessionScope[message]}

+, -, *, / or div, % or mod

&& or and, || or OR, ! or not

== or eq, != or ne, < or lt, > or gt, >= or ge, <= or le


${param.name}
${param["name"]}

${paramValues.name[0]}
${paramValues.name["0"]}

${header.location}
${header["location"]}

${requestScope.emp.empName}
${requestScope.emp[empName]}
${requestScope.emp["empName"]}



EL - Demo

Components to be developed.

1. registration.jsp
2. RegistrationServlet.java
3. User.java [bean class]
4. welcome.jsp

Some values irrelevant to the problem statement is also printed such as 
user-agent. This is purely for the associate to understand.


Spring - JDBC Framework

JdbcTemplate - class

com.spcore.jdbc.model  - Person, PersonMapper
com.spcore.jdbc.dao	   - PersonDAO, PersonDAOImpl
com.spcore.jdbc.client - PersonApp

Execute SQL statements
class JdbcTemplate{
execute()
update()
query()
 |_int queryForInt()
 |_long queryForLong()
 |_Object queryForObject()
 |_List<Employee> queryForList()
}


Case 1: Quering for an integer:

String sql = "select count(*) from employee";
int rowCount = tobj.queryForInt(sql);
long rowCount = tobj.queryForLong(sql);

Case 2: A bind variable:
String sql = "select salary from employee where empid=?";
long mySalary = tobj.queryForLong(sql, new Object[]{1012});

String sql = "select empname from employee where empid=?";
String myName = tobj.queryForObject(sql, new Object[]{1012},String.class);

String sql = "select * from employee where empid=?";
Employee e = tobj.queryForObject(sql, new Object[]{1012},new EmployeeMapper());

String sql = "select * from employee";
List<Employee> eList = tobj.query(sql, new EmployeeMapper()); 

public class EmployeeMapper implements RowMapper<Employee>{
 	public Employee mapRow(ResultSet rs, int rowNum)throws SQLException{
 		Employee e = new Employee();
 		e.setEmpId(rs.getEmpId("empid"));
 		e.setEmpName(rs.getEmpName("empname"));
 		e.setEmpSalary(rs.getEmpSalary("salary"));
 	}
}

case 3: Inserting a row into the table
String sql = "insert into employee(id, name, salary)values(?,?,?);
tobj.update(sql, new Object[]{1101,"Ram",35000});

case 4: updating a row into the table
String sql = "update employee set salary=? where id=?";
tobj.update(sql, new Object[]{46000,1101});

case 5: deleting a row from the table
String sql = "delete employee where id=?";
tobj.update(sql, new Object[]{1102});

		Spring MVC
	--------------------------
1. Build the Maven webapp project.
2. update the version[java&web] from navigator->setting-> open the xml file.
3. pom.xml add required jar files.
   [spring-core|spring-webmvc|spring-context|spring-jdbc|spring-tx]
   [mysql-connector-java|log4j|jstl]
4. update the web-app module version in web.xml file.
5. maven updation 
-------------------------------------------------------
1. create index.jsp 
2. create controller class
   [ @Controller | @RequestMapping | ModelAndView ]
3. In web.xml file configure the Dispatcher servlet [servletname-servlet.xml]
4. create the Handler mapping in WEB-INF/hxvarsity-servlet.xml file    
  -> context:component-scan define the base-package where 
  DispatcherServlet will search the controller class
  -> InternalResourceViewResolver class is used for the ViewResolver
    
interface RowMapper{
 mapRow(ResultSet rs, int row);
}

class BeanPropertyRowMapper<Employee>{
 BeanPropertyRowMapper<Employee>(Employee e){ 
 }
}























https://jsonplaceholder.typicode.com/posts
https://jsonplaceholder.typicode.com/posts/1

Services/SOA/Micservices/Webservices

  It is not specific technology
The ultimate purpose to reuse - company stable
Enterprise App. Integration
RPC - Remote procedure call

Google/Gmail/facebook login

why is it called REST[Representationl State Transfer]?

Big SOA

Web Services

Build distributed systems.
Enable business to business integration.(Suppose one organization uses corba and another uses .net)
enable Service oriented architecture.
Adopted by the grid computing
May exist  internally to an organization to externally in the cloud
SOAP based(WS-) web services
REST style web 

RESTful:
Roy fielding's doctoral dissertation 2000
Fielding (along with Tim Berners-Lee) designed HTTP and URIs
REST - what/why?
REST is not tied to the web i.e. doesn't depend on the mechanics of HTTP
architectural style of the web
HTTP provides 4 basic methods for CRUD 
GET	retrieve representation of resource
PUT	update/modify existing resource
POST	create a new resource
DELETE	delete an existing resource

REST Design guidelines:
All routes/endpoint/api should be collection or element of a collection
It should be noun e.g. courses/java/guvi/book/series/ etc..
Use delete verb to remove single element (restrict deleting collection subective)
follow same path (url) pattern thoughout the collection

http://service.hexvarsity.com/g2
http://service.hexvarsity.com/g2/java
http://service.hexvarsity.com/g2/java/java8

create employee eid int(11) primary key,
ename varchar(30), 
desig varchar(20),
creation_date date);


create table employee(
emp_id int(11) auto_increment, 
emp_name varchar(20) not null,
emp_salary double(10,0) not null default 0,
primary key(emp_id));

create table address (
emp_id int(11) unsigned not null, 
address_line varchar(100) not null default '', zipcode varchar(10) default null, 
city varchar(20) default null, 
primary key(emp_id), 
constraint emp_fk foreign key(emp_id) references employee(emp_id));
HQL -> Hibernate Query Language

HQL from clause

Session-> createQuery()

SQL: select * from employee;
HQL: from employee;

SQL: select * from employee where id=?;
HQL: from employee where id=:id;

HQL: update employee set name=:name, desig=:desig where empid=:empid;
HQL: delete from employee where empid=:empid;

HQL Join:
select e.name, e.desig, a.address, a.city from employee e inner join address a on e.empid=a.empid

HQL Aggregate function
select e.dept, sum(e.salary) from employee e group by e.dept;
->from employee e order by e.name desc

HQL expressions
HQL support order by and group by clauses
HQL allows to write the sub queries 
HQL support all are DDL, DML & executing stored procedure.


Steps for creating Explicit Cursors

Step 1: declare the cursor
syntax: cursor cursor_name is select statement;
e.g.,

cursor cur_loan_info is select * from g2_loan;
cursor cur_get_info(id) is select * from g2_loan where loan_id=id

Step 2: Open the cursor
syntax: open cursor_name	
e.g.,
	open cur_loan_inof; 
	open cur_get_into(1101);

Step 3: fetch the result into PL/SQL variables
syntax:	
	fetch cursor_name into list_of_variables;
	fetch cursor_name into PL/SQL record;
e.g.,
	fetch cur_loan_info into amount;

Step 4: close the cursor.
	close cursor_name

PL/SQL Cursor have a 4 attributes 

1. %ISOPEN		
			if cursor_name%ISOPEN then close cursor_name;
			end if;
2. %FOUND		if cursor_name%FOUND then
			  dbms_output.put_line('Records available');
			end if;
3. %NOTFOUND
4. %ROWCOUNT		dbms_output.put_line(cursor_name%ROWCOUNT);

Triggers

create or replace trigger trigger_name
{before|after|instead of}
{inser|update|delete[of columns]}
on table_name





















http://central.maven.org/maven2/com/sun/faces/jsf-api/2.2.9/
http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.9/


	<managed-bean>
		<managed-bean-name>loginBean</managed-bean-name>
		<managed-bean-class>com.varsity.model.LoginBean</managed-bean-class>
		<managed-bean-scope>request</managed-bean-scope>
	</managed-bean>
















 

























































































































































