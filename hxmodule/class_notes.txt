Wrapper classes
------------------

class Boolean{
 public static boolean parseBoolean(String){}
}
class Byte{
 public static byte parseByte(String){}
}
class Short{
 public static short parseShort(String){}
}
class Integer{
 public static int parseInt(String){}
}
Long
Float
Double
Character

Scanner API - java.util
------------------------
class Scanner{
 String next(){}
 String nextLine(){} 
 boolean nextBoolean(){}
}

java.io	- stream[byte/char]
--------------------------------------

byte			char

InputStream		Reader
OutputStream		Writer

BufferedReader br=new BufferedReader(new InputStream(System.in));

Collection(I)

boolean add(Object obj);
boolean addAll(Collection c);
int size();
boolean remove(Object);
boolean removeAll(Collection c);
boolean retainAll(Collection c);
void clear();
boolean contains(Object obj)
boolean containsAll(Collection c);
Iterator iterator();
Object[] toArray();

List(I)
boolean add(int index, Object obj)
boolean addAll(int index, Object obj)
boolean set(int index, Object obj);
Object get(int index);
Object remove(int index)


Map(I)
Object put(Object, Object);
void putAll(Map obj);
Object remove(Object key);
Object get(Object key);
boolean containsKey(Object key);
Set<Map.Entry> entrySet();
Set keySet();


ArrayList<String> obj = new ArrayList<E>();

HashSet<Integer> obj = new HashSet<E>();

HashMap<Integer, Student> obj = new HashMap<K, V>();


List<Customer> cList = new ArrayList<Customer>();

Set<String> mSet = new TreeSet<String>();
Set<String> mSet = new TreeSet<String>().desentingSet();


Map<Integer, String> cMap = new TreeMap<Integer, String>().desentingMap();


1. init

public void init(ServletConfig config){
}

2. service

public void service(ServletRequest request, ServletResponse response)throws ServletException, IOException{
}

3. destroy

public void destroy(){}

ServletRequest
public String getParameter(String);
public String[] getParameterValues(String);
public Enumeration getParameterNames();
public Map<K, V> getParameterMap();
public String setAttribute(String key, Object value);
public Object getAttribute(String key);
public void removeAttribute(String key);
public RequestDispatcher getRequestDispatcher(String url);
 

HttpServletRequest
Cookie[] getCookies()
HttpSession getSession()



ServletResponse
public PrintWriter getWriter();
public void setContentType(String)
public void setLocale(String type);
public Locale getLocale();


HttpServletResponse
public void sendRedirect(String);
public void sendError(int sc, String msg);
public void setStatus(int sc);
public void addCookie(Cookie obj);


HttpServlet

public void doGet(HttpServletRequest request, 
		  HttpServletResponse response)throws 		  ServletException, IOException{
}

ServletConfig
public String getInitParameter(String param-name);
public ServletContext getServletContext()



ServletContext


Session Management Techniques
1. URL Rewriting
2. Hidden form fields
3. Cookies
4. HttpSession



github.com

Session Management Technique:

Session Object: It is container used for storing user states in server.

HttpSession(I)

String setAttribute(String, Object)
Object getAttribute(String)
void removeAttribute(String)
Enumeration getAttributeNames()
String getId()
long getLastAccessedTime()
void setMaxInactiveInterval(int interval)
int getMaxInactiveInterval()
void invalidate();  

HttpSession session = request.getSession()
session.setAttribute(key, value);
session.getAttribute(key);

Design Pattern
1. Functional Design
2. Data Design
3. Interface Design

Directives:
It provides meta data infomation about the JSP file to the web container.

a. importing tag libraries
b. import required classes
c. set output buffering options
d. include the content from external files[header/footer.html]

<%@page %>

1. buffer="none|8kb|16kb.."
2. autoFlush="true/false"
3. contentType="text/html;charSet=ISO-8859-1"
4. errorPage="error.jsp"
5. isErrorPage="true/false"
6. extends="BaseClassName"
7. import="java.util.Date,java.io.BufferedReader"
8. info=""
9. isThreadSafe="true/false"
10. language="java"
11. session="true"
12. isELIgnored="true/false"
13. isScriptingEnabled = "true/false"


JSP Action Tags:
<jsp:actionTag_Name attribute="value">

<jsp:include page="pageName" />

<jsp:forward page="pageName">
  <jsp:param name="value" value="data"/>
</jsp:forward>

<jsp:useBean id="name" 
			 class="packagename.classname" 
             scope="page/request/session/application"
             type=""
             beanName="">
<jsp:setProperty name="beanId" 
                 property="NameofVariable" 
                 value="uiComponentName"/>
e.g.
<jsp:useBean id="emp" class="com.varsity.model.Employee" scope="request"/>
<jsp:setProperty name="emp" property="empId" value="empId" />
[or]
<jsp:setProperty name="emp" property="*"/>
<jsp:getProperty name="beanId" property="propertyName" />


SimpleTagSupport

doTag()
getParent() 
setParent()
setJspContext(JspContext context)
JspContext getJspContext()
JspFragment getJspBody()

JspContext
JspWriter getOut()

JspFragment
invoke(Writer obj)

Tags with Attribute.

Step1: Add attribute as a property to the tag handler.

Step2: Create setter method for the property follwing the bean setter naming convention.

Expression Language [EL]

EL is simple language for accessing data stored in java beans.
EL was introduced with the JSP 2.0 specification
EL can also be used access values from implicit objects like pageContext,
header, cookie etc.
syntax:
	${person.name}

pageContext
param
paramValues
header
headerValues
cookie
initParam
pageScope
requestScope
sessionScope
applicationScope

.operator
${sessionScope.message}

[] operator
${sessionScope[message]}

+, -, *, / or div, % or mod

&& or and, || or OR, ! or not

== or eq, != or ne, < or lt, > or gt, >= or ge, <= or le


${param.name}
${param["name"]}

${paramValues.name[0]}
${paramValues.name["0"]}

${header.location}
${header["location"]}

${requestScope.emp.empName}
${requestScope.emp[empName]}
${requestScope.emp["empName"]}



EL - Demo

Components to be developed.

1. registration.jsp
2. RegistrationServlet.java
3. User.java [bean class]
4. welcome.jsp

Some values irrelevant to the problem statement is also printed such as 
user-agent. This is purely for the associate to understand.




















































































































































